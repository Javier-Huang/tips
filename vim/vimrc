"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 通用设置
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let mapleader = ","      " 定义<leader>键
set nocompatible         " 设置不兼容原始vi模式
filetype on              " 设置开启文件类型侦测
filetype plugin on       " 设置加载对应文件类型的插件
set noeb                 " 关闭错误的提示
syntax enable            " 开启语法高亮功能
syntax on                " 自动语法高亮
set t_Co=256             " 开启256色支持
set cmdheight=2          " 设置命令行的高度
set showcmd              " select模式下显示选中的行数
set ruler                " 总是显示光标位置
set laststatus=2         " 总是显示状态栏
set number               " 开启行号显示
set cursorline           " 高亮显示当前行
set whichwrap+=<,>,h,l   " 设置光标键跨行
set ttimeoutlen=0        " 设置<ESC>键响应时间
set virtualedit=block,onemore   " 允许光标出现在最后一个字符的后面

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 代码缩进和排版
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set autoindent           " 设置自动缩进
set cindent              " 设置使用C/C++语言的自动缩进方式
set cinoptions=g0,:0,N-s,(0    " 设置C/C++语言的具体缩进方式
set smartindent          " 智能的选择对其方式
filetype indent on       " 自适应不同语言的智能缩进
set expandtab            " 将制表符扩展为空格
set tabstop=4            " 设置编辑时制表符占用空格数
set shiftwidth=4         " 设置格式化时制表符占用空格数
set softtabstop=4        " 设置4个空格为制表符
set smarttab             " 在行和段开始处使用制表符
set nowrap               " 禁止折行
set wrap               " 禁止折行
set backspace=2          " 使用回车键正常处理indent,eol,start等
set sidescroll=10        " 设置向右滚动字符数
set nofoldenable         " 禁用折叠代码

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 代码补全
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set wildmenu             " vim自身命名行模式智能补全
set completeopt-=preview " 补全时不显示窗口，只显示补全列表

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 代码折叠
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set foldmethod=indent   " 基于缩进进行折叠
"set foldmethod=syntax    " 基于代码进行折叠
set nofoldenable         " 启动 vim 时关闭折叠代码

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 代码搜索忽略
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.db,*.sqlite,*.o,*/.git

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 搜索设置
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set hlsearch            " 高亮显示搜索结果
set incsearch           " 开启实时搜索功能
set ignorecase          " 搜索时大小写不敏感

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 缓存设置
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nobackup            " 设置不备份
set noswapfile          " 禁止生成临时文件
set autoread            " 文件在vim之外修改过，自动重新读入
set autowrite           " 设置自动保存
set confirm             " 在处理未保存或只读文件的时候，弹出确认

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 编码设置
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set langmenu=zh_CN.UTF-8
set helplang=cn
set termencoding=utf-8
set encoding=utf8
set fileencodings=utf8,ucs-bom,gbk,cp936,gb2312,gb18030

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" normal模式大小下部分命令大小写兼容
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
cnoreabbrev W! w!
cnoreabbrev Q! q!
cnoreabbrev Qall! qall!
cnoreabbrev Wq wq
cnoreabbrev Wa wa
cnoreabbrev wQ wq
cnoreabbrev WQ wq
cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev Qall qall
cnoreabbrev Qa qa
cnoreabbrev Wqa wqa

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 插件列表
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin('~/.vim/plugged')

Plug 'ryanoasis/vim-devicons'                       "显示文件类型图标
Plug 'chxuan/tagbar'                                                            "函数列表
Plug 'chxuan/vim-buffer'                                                        "vim buffer操作
Plug 'Valloric/YouCompleteMe'                                           "自动补全
Plug 'junegunn/fzf'                                                             "模糊文件搜索
Plug 'mileszs/ack.vim'                                                          "模糊字符串搜索
Plug 'easymotion/vim-easymotion'                    "代码跳转工具
Plug 'jiangmiao/auto-pairs'                                             "自动补全引号、圆括号、花括号等
Plug 'scrooloose/nerdtree'                                                      "代码资源管理器
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'Xuyuanp/nerdtree-git-plugin'                                      "NerdTree显示git状态
Plug 'tpope/vim-commentary'                                             "快速注释代码
Plug 'tpope/vim-endwise'                                                        "if/end/endif/endfunction补全
Plug 'octol/vim-cpp-enhanced-highlight'  
Plug 'vim-airline/vim-airline'                                          "状态栏美化
Plug 'vim-airline/vim-airline-themes' 
Plug 'junegunn/vim-slash'                                                       "优化搜索，移动光标后清除高亮
Plug 'skywind3000/vim-preview'                                          "代码预显示
Plug 'brookhong/cscope.vim'                                             "代码查找
" Plug 'ludovicchabant/vim-gutentags'                           "ctags异步生成
" Plug 'skywind3000/gutentags_plus'
Plug 'tpope/vim-fugitive'                                                       "集成git
Plug 'junegunn/gv.vim'                                                          "显示git提交记录
Plug 'xolox/vim-misc'                               "被vim session依赖
Plug 'xolox/vim-session'                            "vim session
Plug 'showliu/vbookmark.vim'                        "书签
Plug 'rhysd/git-messenger.vim'
" Plug 'xavierd/clang_complete'

call plug#end()            

" load vim default plugin
runtime macros/matchit.vim

" 编辑vimrc文件
nnoremap <leader>e :edit $MYVIMRC<cr>

" 重新加载vimrc文件
nnoremap <leader>s :source $MYVIMRC<cr>

" 安装、更新、删除插件
nnoremap <leader><leader>i :PlugInstall<cr>
nnoremap <leader><leader>u :PlugUpdate<cr>
nnoremap <leader><leader>c :PlugClean<cr>

" 分屏窗口移动
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" 复制当前选中到系统剪切板
vmap <leader><leader>y "+y

" 将系统剪切板内容粘贴到vim
nnoremap <leader><leader>p "+p

" 打开文件自动定位到最后编辑的位置
autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | execute "normal! g'\"" | endif

autocmd VimEnter * call AddTagsInCwdPath()
" 主题
set background=dark
let g:onedark_termcolors=256
colorscheme onedark

"airline
let g:airline_theme="onedark"
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''

"nerdtree
nnoremap <silent> <leader>n :NERDTreeToggle<cr>
let g:NERDTreeFileExtensionHighlightFullName = 1
let g:NERDTreeExactMatchHighlightFullName = 1
let g:NERDTreePatternMatchHighlightFullName = 1
let g:NERDTreeHighlightFolders = 1         
let g:NERDTreeHighlightFoldersFullName = 1 
let g:NERDTreeDirArrowExpandable='▷'
let g:NERDTreeDirArrowCollapsible='▼'
let g:NERDTreeIgnore = ['\.rbc$', '\~$', '\.pyc$', '\.db$', '\.sqlite$', '__pycache__', '\.o$', '\.builtin$', '\.order$', '\.dtb$']
let NERDTreeShowHidden = 0  "不显示隐藏文件
autocmd StdinReadPre * let s:std_in=1
" 当nerdtree为剩下的唯一窗口时自动关闭
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" 当打开目录时，nerdtree自动打开
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif
" 未指定文件，在vim打开时自动打开nerdtree
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" YCM
let g:ycm_confirm_extra_conf = 0 
let g:ycm_seed_identifiers_with_syntax = 1 
let g:ycm_complete_in_comments = 1 
let g:ycm_complete_in_strings = 1 
let g:ycm_server_python_interpreter = '/usr/bin/python2'
let g:ycm_python_binary_path = 'python'
let g:ycm_min_num_of_chars_for_completion=2             " 从第2个键入字符就开始罗列匹配项
"let g:ycm_show_diagnostics_ui = 0                       " 禁用代码检查
let g:ycm_show_diagnostics_ui = 1                       " 启用代码检查
" 补全文件
if getcwd() =~ "kernel" || filereadable( '.kernel' )
    let g:ycm_global_ycm_extra_conf='~/.vim/plugged/YouCompleteMe/config/ycm_conf_for_arm_linux.py'
elseif getcwd() =~ "u-boot" || filereadable( '.uboot' )
    let g:ycm_global_ycm_extra_conf='~/.vim/plugged/YouCompleteMe/config/ycm_conf_for_uboot.py'
else
        let g:ycm_global_ycm_extra_conf='~/.vim/plugged/YouCompleteMe/config/ycm_conf_for_c.py'
endif

let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_semantic_triggers =  {
  \   'c' : ['->', '.','re![_a-zA-z0-9]'],
  \   'objc' : ['->', '.', 're!\[[_a-zA-Z]+\w*\s', 're!^\s*[^\W\d]\w*\s',
  \             're!\[.*\]\s'],
  \   'ocaml' : ['.', '#'],
  \   'cpp,objcpp' : ['->', '.', '::','re![_a-zA-Z0-9]'],
  \   'perl' : ['->'],
  \   'php' : ['->', '::'],
  \   'cs,java,javascript,typescript,d,python,perl6,scala,vb,elixir,go' : ['.'],
  \   'ruby' : ['.', '::'],
  \   'lua' : ['.', ':'],
  \   'erlang' : [':'],
  \ }
let g:ycm_semantic_triggers.c = ['->', '.', ' ', '(', '[', '&',']']

" nerdtree-git-plugin
let g:NERDTreeIndicatorMapCustom = { 
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?" 
    \}"

" tagbar
let g:tagbar_width = 30
nnoremap <silent> <leader>t :TagbarToggle<cr>
inoremap <silent> <leader>t <esc> :TagbarToggle<cr>

" vim-easymotion
let g:EasyMotion_smartcase = 1
map <leader>w <Plug>(easymotion-bd-w)
nmap <leader>w <Plug>(easymotion-overwin-w)

" ack
nnoremap <leader>f :Ack!<space>

"FZF
nnoremap <leader>fz :FZF<cr>

" gv
nnoremap <leader>g :GV<cr>
nnoremap <leader>G :GV!<cr>
nnoremap <leader>gg :GV?<cr>

"session
let g:session_directory = "~/.cache/session"
nnoremap <leader>so :OpenSession<CR>
nnoremap <leader>ss :SaveSession<Space>
nnoremap <leader>sd :DeleteSession<CR>
nnoremap <leader>sc :CloseSession<CR> 

"gitmessager
"默认情况下使用<leader>gm来查看commit

"bookmask
" 禁用默认的按键绑定
let g:vbookmark_disableMapping = 1
let g:session_autosave = 'no'
noremap <leader>h :VbookmarkListAll <CR>
nnoremap <silent> mm :VbookmarkToggle<CR>
nnoremap <silent> mc :VbookmarkNext<CR>
nnoremap <silent> ma :VbookmarkClearAll<CR>

" 空格选中单词
nnoremap <space> viw
"若版本号大于8.0,支持在脚本中打开终端
if version >= 800
    nnoremap <leader>te : terminal<cr>
endif

" 用于buffer之间的切换,删除
nnoremap 1 : bp <cr>
nnoremap <silent> <leader>j :bp <cr>
nnoremap 2 : bn <cr>
nnoremap <silent> <leader>k :bn<cr>
nnoremap <silent> <c-w> : bdelete<cr>
nnoremap <silent> <leader>d :bdelete<cr>
nnoremap <silent> <tab> : bn<cr>
nnoremap <silent> <leader>D :BufOnly<cr>        "删除当前buffer外的所有buffer

"vim-preview
" let g:preview_nolist = 1
nnoremap 3 : PreviewTag<cr>
noremap <leader>3 : PreviewClose<cr>
nnoremap 4 : PreviewSignature!<cr>

" cscope
let g:cscope_interested_files = '\.c$\|\.cpp$\|\.h$\|\.hpp$|\.s$|\.S$|'
nnoremap <leader>fa :call CscopeFindInteractive(expand('<cword>'))<CR>
nnoremap <leader>l :call ToggleLocationList()<CR>
nnoremap  <leader>fs :call CscopeFind('s', expand('<cword>'))<CR>
" g: Find this definition
nnoremap  5 :call CscopeFind('g', expand('<cword>'))<CR>
" c: Find functions calling this function
nnoremap  6 :call CscopeFind('c', expand('<cword>'))<CR>

" gutentags
" gutentags搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归 "
let g:gutentags_project_root = ['.root', '.svn', '.git', '.project']
" 所生成的数据文件的名称 "
let g:gutentags_ctags_tagfile = '.tags'
" 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录 "
let s:vim_tags = expand('~/.cache/tags')
let g:gutentags_cache_dir = s:vim_tags
" 检测 ~/.cache/tags 不存在就新建 "
if !isdirectory(s:vim_tags)
   silent! call mkdir(s:vim_tags, 'p')
endif
" 配置 ctags 的参数 "
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+pxI']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']
" 如果使用 universal ctags 需要增加下面一行
" let g:gutentags_ctags_extra_args += ['--output-format=e-ctags']

" ctags
"ctags使用Ctrl+P从ctags数据库中补全
" set tags+=/home/hjf/work/linux-4.0.1/tags
if filereadable( '.qt' )
    set cmdheight=1          " 设置命令行的高度
    set tags+=/usr/include/qt/tags
endif
"set tags+=/home/hjf/work/openwrt_widora/build_dir/target-mipsel_24kec+dsp_uClibc-0.9.33.2/linux-ramips_mt7688/linux-3.18.29/tags

"修改/home/hjf/.vim/plugged/cscope.vim/plugin/cscope.vim其中的cscope_vim_dir的内容
"let s:cscope_vim_dir = substitute($HOME,'\\','/','g')."/.cache/cscope"

" clang_complete
" let g:clang_use_library=1
" let g:clang_library_path='/usr/lib/llvm-13/lib/libclang.so.1'
